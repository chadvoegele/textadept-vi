diff -r 5969451ae1fe src/Makefile
--- a/src/Makefile	Tue Feb 28 18:27:15 2017 -0500
+++ b/src/Makefile	Sun Mar 19 17:47:37 2017 -0500
@@ -61,8 +61,8 @@
   libluajit = luajit/src/libluajit.osx.a
 else
   # Build for Linux/BSD.
-  CFLAGS = -Os
-  CXXFLAGS = -Os -std=c++0x
+  CFLAGS = -fPIC -Os
+  CXXFLAGS = -fPIC -Os -std=c++0x
   LUA_CFLAGS = -DLUA_USE_LINUX
   LDFLAGS = -rdynamic -Wl,--retain-symbols-file -Wl,lua.sym
   ifeq (Linux, $(shell uname -s))
@@ -78,7 +78,9 @@
   XDG_DATA_DIR ?= $(PREFIX)/share/applications
   svg_file = $(data_dir)/core/images/textadept.svg
   desktop_files := $(wildcard *.desktop)
-  ifeq (, $(findstring curses, $(MAKECMDGOALS)))
+  ifeq (headless, $(findstring headless, $(MAKECMDGOALS)))
+    plat_flag = -DHEADLESS
+  else ifeq (, $(findstring curses, $(MAKECMDGOALS)))
     plat_flag = -DGTK
     ifndef GTK3
       gtk_version = 2.0
@@ -125,7 +127,8 @@

 textadept_gtk_objs = textadept.o textadeptjit.o
 textadept_curses_objs = textadept-curses.o textadeptjit-curses.o
-textadept_objs = $(textadept_gtk_objs) $(textadept_curses_objs)
+textadept_headless_objs = textadept-headless.o
+textadept_objs = $(textadept_gtk_objs) $(textadept_curses_objs) $(textadept_headless_objs)
 lua_objs = lapi.o lcode.o lctype.o ldebug.o ldo.o ldump.o lfunc.o lgc.o \
            linit.o llex.o lmem.o lobject.o lopcodes.o lparser.o lstate.o \
            lstring.o ltable.o ltm.o lundump.o lvm.o lzio.o \
@@ -154,6 +157,7 @@

 all: textadept textadeptjit
 curses: textadept-curses textadeptjit-curses
+headless: textadept_headless
 win32: textadept.exe textadeptjit.exe
 win32-curses: textadept-curses.exe textadeptjit-curses.exe
 osx: textadept textadeptjit
@@ -214,6 +218,7 @@
 $(textadept_gtk_objs): ta_flags += $(GTK_CFLAGS)
 $(textadept_curses_objs): \
   ta_flags += -Iscintilla/term -Itermkey -Icdk $(CURSES_CFLAGS)
+$(textadept_headless_objs): ta_flags += -Iscintilla/term -Itermkey -Icdk
 lspawn.o lspawnjit.o: spawn_flags = -DGTK $(GLIB_CFLAGS)
 $(gtdialog_objs): gtdialog_flags = $(plat_flag) -DNOHELP -DLIBRARY
 gtdialog.o: gtdialog_flags += $(GTK_CFLAGS)
@@ -238,6 +243,11 @@
                   $(lua_lib_objs) lspawn-curses.o gtdialog-curses.o termkey.o \
                   $(termkey_unix_objs) $(cdk_objs)
 	$(CROSS)$(CXX) $(CXXFLAGS) -o ../$@ $^ $(CURSES_LIBS) $(LDFLAGS)
+textadept_headless: $(sci_objs) $(sci_lex_objs) ScintillaTerm.o $(regex_objs) \
+                  LexLPeg-curses.o textadept-headless.o $(lua_objs) \
+                  $(lua_lib_objs) lspawn-curses.o gtdialog-curses.o termkey.o \
+                  $(termkey_unix_objs) $(cdk_objs)
+	$(CROSS)$(CXX) $(CXXFLAGS) -rdynamic -shared -o ../$@.so $^ $(LDFLAGS)
 textadeptjit-curses: $(sci_objs) $(sci_lex_objs) ScintillaTerm.o $(regex_objs) \
                      LexLPegjit-curses.o textadeptjit-curses.o \
                      $(luajit_lib_objs) $(libluajit) lspawnjit-curses.o \
diff -r 5969451ae1fe src/textadept.c
--- a/src/textadept.c	Tue Feb 28 18:27:15 2017 -0500
+++ b/src/textadept.c	Sun Mar 19 17:47:37 2017 -0500
@@ -38,6 +38,12 @@
 #undef main
 #endif
 #include <curses.h>
+#elif HEADLESS
+#include <signal.h>
+#include <sys/ioctl.h>
+#include <sys/time.h>
+#define __USE_GNU
+#include <dlfcn.h>
 #endif

 // External dependency includes.
@@ -48,7 +54,7 @@
 #include "Scintilla.h"
 #if GTK
 #include "ScintillaWidget.h"
-#elif CURSES
+#elif CURSES || HEADLESS
 #include "ScintillaTerm.h"
 #include "cdk_int.h"
 #include "termkey.h"
@@ -1581,6 +1587,9 @@
   lua_pushboolean(L, 1), lua_setglobal(L, "CURSES");
   show_tabs = 0; // TODO: tabs
 #endif
+#if HEADLESS
+  lua_pushboolean(L, 1), lua_setglobal(L, "HEADLESS");
+#endif
   const char *charset = NULL;
 #if GTK
   g_get_charset(&charset);
@@ -2634,3 +2643,83 @@
   return main(__argc, __argv); // MSVC extensions
 }
 #endif
+
+#if HEADLESS
+#define MAX_ARGS 1024  // upper bound for number of args, values
+static int ta_headless_init(lua_State *L);
+static char textadept_home_buffer[FILENAME_MAX];
+static char* arg0 = "textadept_headless.so";
+
+static const struct luaL_Reg textadept_headless[] = {
+  {"init", ta_headless_init},
+  {NULL, NULL}
+};
+
+LUAMOD_API int luaopen_textadept_headless(lua_State *L) {
+  luaL_newlib(L, textadept_headless);
+  return 1;
+}
+
+static void set_textadept_home() {
+  Dl_info info;
+  int dladdr_status = dladdr(&textadept_headless, &info);
+  if (dladdr_status == 0 || info.dli_fname == NULL) {
+    fprintf(stderr, "Failed to get textadept_home: %s\n", dlerror());
+  }
+  strcpy(textadept_home_buffer, info.dli_fname);
+  char* last_slash;
+  if ((last_slash = strrchr(textadept_home_buffer, '/'))) *last_slash = '\0';
+  textadept_home = textadept_home_buffer;
+}
+
+static int ta_headless_init(lua_State *L) {
+  set_textadept_home();
+  lua = L;
+  focused_view = scintilla_new(NULL);
+  initing = 1;
+  int n = lua_gettop(L);
+  if (n == 0) {
+    lL_init(L, 0, NULL, 0);
+
+  } else if (n == 1 && lua_istable(L, 1)) {
+    lua_getglobal(L, "arg");  // lL_init sets global arg, save it here
+
+    char* args[MAX_ARGS];
+    args[0] = arg0;
+
+    size_t argc = 1;
+    int table_index = lua_absindex(L, 1);
+    lua_len(L, table_index);
+    unsigned table_len = lua_tointeger(L, -1);
+    lua_pop(L, 1);
+    for (unsigned i = 1; i <= table_len; i++) {
+      if (lua_geti(L, table_index, i) != LUA_TSTRING) {
+        lua_pushliteral(L, "ta_headless_init table argument must have only strings.");
+        lua_error(L);
+      }
+
+      const char* iarg = lua_tostring(L, -1);
+      args[argc] = (char*)malloc(strlen(iarg)*sizeof(char*));
+      strcpy(args[argc], iarg);
+      argc = argc + 1;
+
+      lua_pop(L, 1);
+    }
+
+    lL_init(L, argc, args, 0);
+
+    for (size_t ai = 1; ai < argc; ai++) {
+      free(args[ai]);
+    }
+
+    lua_setglobal(L, "arg");  // restore original arg
+
+  } else {
+    lua_pushliteral(L, "ta_headless_init expects either 0 or 1 table argument.");
+    lua_error(L);
+  }
+  lbuffer_new(L);
+  initing = 0;
+  return 0;
+}
+#endif
